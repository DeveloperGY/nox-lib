#ifndef NOX_ARRAY_HPP
#define NOX_ARRAY_HPP

#include "exception"
#include "allocator"

#include <cstddef>

namespace nox
{
    template <class _Tp, std::size_t _Nm>
    struct array
    {
        _Tp _elems[_Nm ? _Nm : 1];

        // Iterators
        _Tp *begin();
        _Tp *end();

        // Accessors
        _Tp &operator[](std::size_t __n);
        _Tp &at(std::size_t __n);
        _Tp &front();
        _Tp &back();
    };
}

// Iterators

template <class _Tp, std::size_t _Nm>
_Tp *nox::array<_Tp, _Nm>::begin()
{
    return &this->_elems[0];
}

template <class _Tp, std::size_t _Nm>
_Tp *nox::array<_Tp, _Nm>::end()
{
    return &this->_elems[_Nm];
}

// Accessors

template <class _Tp, std::size_t _Nm>
_Tp &nox::array<_Tp, _Nm>::operator[](std::size_t __n)
{
    return this->_elems[__n];
}

template <class _Tp, std::size_t _Nm>
_Tp &nox::array<_Tp, _Nm>::at(std::size_t __n)
{
    if (__n >= _Nm)
        nox::__throw_out_of_range("nox::array::at()");

    return this->_elems[__n];
}

template <class _Tp, std::size_t _Nm>
_Tp &nox::array<_Tp, _Nm>::front()
{
    return this->_elems[0];
}

template <class _Tp, std::size_t _Nm>
_Tp &nox::array<_Tp, _Nm>::back()
{
    return this->_elems[_Nm - 1];
}

#endif