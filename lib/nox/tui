#ifndef NOX_DISPLAY_HPP
#define NOX_DISPLAY_HPP

#include "_math/vec"
#include "vector"

#include <cstddef>
#include <cstdio>

#include <string> // temp until custom string class

// " \x1b [ 4 8 ;  2 ; 0 0  0 ; 0 0  0 ; 0 0  0 m \x1b [ m"
//   1    1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1  1 1 1    1 1
//   1  + 19 + 2

namespace nox
{
    typedef nox::vec3<unsigned char> color;

    template <std::size_t _Wd, std::size_t _Ht>
    class tui
    {
        private:
            nox::vector<char> _M_character_buffer;
            nox::vector<nox::color> _M_foreground_color_buffer;
            nox::vector<nox::color> _M_background_color_buffer;
            nox::vector<char> _M_print_buffer;

        public:
            tui();

            constexpr void display() noexcept;

            constexpr void draw_character(nox::vec2<std::size_t> __pos, const char &__c, const nox::color &__fg, const nox::color &__bg) noexcept;
            constexpr void draw_pixel(nox::vec2<std::size_t> __pos, const nox::color &__color) noexcept;
    };
}

#include "_tcc/tui.tcc"

#endif