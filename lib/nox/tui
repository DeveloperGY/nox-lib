#ifndef NOX_DISPLAY_HPP
#define NOX_DISPLAY_HPP

#include "_math/vec"
#include "vector"

#include <cstddef>
#include <cstdio>
#include <iostream>

namespace nox
{
    struct color
    {
        unsigned char r;
        unsigned char g;
        unsigned char b;
    };

    template <std::size_t _Width, std::size_t _Height>
    class tui
    {
        private:
            nox::vector<char> m_character_buffer;
            nox::vector<nox::color> m_foreground_color_buffer;
            nox::vector<nox::color> m_background_color_buffer;
            nox::vector<char> m_print_buffer;

        public:
            tui();

            constexpr void display() noexcept;

            constexpr void draw_pixel(nox::vec2<std::size_t> __position, const nox::color &__color) noexcept;
            constexpr void draw_character(nox::vec2<std::size_t> __position, const char &__character, const nox::color &__foreground_color, const nox::color &__background_color) noexcept;

            constexpr void draw_rect(nox::vec2<std::size_t> __position, nox::vec2<std::size_t> __dimensions, const nox::color &__fill_color, const nox::color &__border_color);
            constexpr void draw_rect_c(nox::vec2<std::size_t> __position, nox::vec2<std::size_t> __dimensions, const char &__fill_character, const char &__border_character, const nox::color &__fill_foreground_color, const nox::color &__fill_background_color, const nox::color &__border_foreground_color, const nox::color &__border_background_color);

            constexpr void draw_fill_rect(nox::vec2<std::size_t> __position, nox::vec2<std::size_t> __dimensions, const nox::color &__color);
            constexpr void draw_fill_rect_c(nox::vec2<std::size_t> __position, nox::vec2<std::size_t> __dimensions, const char &__character, const nox::color &__foreground_color, const nox::color &__background_color);

            constexpr void draw_stroke_rect(nox::vec2<std::size_t> __position, nox::vec2<std::size_t> __dimensions, const nox::color &__color);
            constexpr void draw_stroke_rect_c(nox::vec2<std::size_t> __position, nox::vec2<std::size_t> __dimensions, const char &__character, const nox::color &__foreground_color, const nox::color &__background_color);

            constexpr void draw_text_horizontal(nox::vec2<std::size_t> __position, const char *__text, const nox::color &__foreground_color, const nox::color &__background_color);
            constexpr void draw_text_vertical(nox::vec2<std::size_t> __position, const char *__text, const nox::color &__foreground_color, const nox::color &__background_color);

            constexpr void draw_line();
            constexpr void draw_line_c(nox::vec2<std::size_t> __start_position, nox::vec2<std::size_t> __end_position, const char &__character, const nox::color __foreground_color, const nox::color &__background_color);
    };
}

#include "_tcc/tui.tcc"

#endif