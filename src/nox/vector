#ifndef NOX_VECTOR_HPP
#define NOX_VECTOR_HPP

#include "allocator"
#include "_internal/_helper.hpp"

#include <cstddef>

namespace nox
{
    template <class _Tp, class _Al = nox::allocator<_Tp>>
    class vector
    {
        private:
            std::size_t _M_capacity;
            std::size_t _M_size;
            _Tp *_M_elems;
        
        public:
            constexpr vector();
            ~vector() noexcept;
            constexpr nox::vector<_Tp, _Al> &operator=(nox::vector<_Tp, _Al> &__v);

            // Element access

            constexpr _Tp &operator[](std::size_t __n) noexcept;
            constexpr _Tp &operator[](std::size_t __n) const noexcept;

            constexpr _Tp &at(std::size_t __n);
            constexpr _Tp &at(std::size_t __n) const;

            constexpr _Tp &front() noexcept;
            constexpr _Tp &front() const noexcept;

            constexpr _Tp &back() noexcept;
            constexpr _Tp &back() const noexcept;

            constexpr _Tp *data() noexcept;
            constexpr _Tp *data() const noexcept;

            // Iterators

            constexpr _Tp *begin() noexcept;
            constexpr _Tp *begin() const noexcept;

            constexpr _Tp *end() noexcept;
            constexpr _Tp *end() const noexcept;

            // Capacity

            [[nodiscard]] constexpr bool empty() noexcept;
            [[nodiscard]] constexpr bool empty() const noexcept;

            [[nodiscard]] constexpr std::size_t size() noexcept;
            constexpr std::size_t size() const noexcept;

            constexpr std::size_t capacity() noexcept;
            constexpr std::size_t capacity() const noexcept;

            constexpr void reserve(std::size_t __n);

            // Modifiers

            constexpr void clear() noexcept;
            constexpr void insert(_Tp *__position, const _Tp &__e);

            template <class... Args>
            constexpr void emplace(_Tp *__position, Args&&... args);
            
            constexpr void erase(_Tp *__position);
            constexpr void erase(_Tp *__first, _Tp *__last);
            constexpr void push_back(const _Tp &__e);

            template <class... Args>
            constexpr void emplace_back(Args&&... args);
            
            constexpr void pop_back();
            constexpr void swap(nox::vector<_Tp, _Al> &__v) noexcept;

            constexpr nox::vector<_Tp, _Al> filter(bool (*__pred)(const _Tp &)) const; // this could be optimized by shifting values around and implementing erasing a range
    };
}

#include "_tcc/vector.tcc"

#endif