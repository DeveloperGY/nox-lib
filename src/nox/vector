#ifndef NOX_VECTOR_HPP
#define NOX_VECTOR_HPP

#include "allocator"
#include "_internal/_helper.hpp"

#include <cstddef>

namespace nox
{
    template <class _Type, class _Allocator = nox::allocator<_Type>>
    class vector
    {
        private:
            std::size_t m_capacity;
            std::size_t m_size;
            _Type *m_elems;
        
        public:
            constexpr vector();
            ~vector() noexcept;
            constexpr nox::vector<_Type, _Allocator> &operator=(const nox::vector<_Type, _Allocator> &__vector);

            // Element access

            constexpr _Type &operator[](std::size_t __index) noexcept;
            constexpr _Type &operator[](std::size_t __index) const noexcept;

            constexpr _Type &at(std::size_t __index);
            constexpr _Type &at(std::size_t __index) const;

            constexpr _Type &front() noexcept;
            constexpr _Type &front() const noexcept;

            constexpr _Type &back() noexcept;
            constexpr _Type &back() const noexcept;

            constexpr _Type *data() noexcept;
            constexpr _Type *data() const noexcept;

            // Iterators

            constexpr _Type *begin() noexcept;
            constexpr _Type *begin() const noexcept;

            constexpr _Type *end() noexcept;
            constexpr _Type *end() const noexcept;

            // Capacity

            [[nodiscard]] constexpr bool empty() noexcept;
            [[nodiscard]] constexpr bool empty() const noexcept;

            [[nodiscard]] constexpr std::size_t size() noexcept;
            constexpr std::size_t size() const noexcept;

            constexpr std::size_t capacity() noexcept;
            constexpr std::size_t capacity() const noexcept;

            constexpr void reserve(std::size_t __new_capacity);

            // Modifiers

            constexpr void clear() noexcept;
            constexpr void insert(_Type *__position, const _Type &__element);

            template <class... _Args>
            constexpr void emplace(_Type *__position, _Args&&... __args);
            
            constexpr void erase(_Type *__position);
            constexpr void erase(_Type *__first, _Type *__last);
            constexpr void push_back(const _Type &__element);

            template <class... _Args>
            constexpr void emplace_back(_Args&&... __args);
            
            constexpr void pop_back();
            constexpr void swap(nox::vector<_Type, _Allocator> &__vector) noexcept;

            constexpr nox::vector<_Type, _Allocator> filter(bool (*__predicate)(const _Type &)) const;
    };
}

#include "_tcc/vector.tcc"

#endif