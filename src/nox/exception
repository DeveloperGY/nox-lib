#ifndef NOX_EXCEPTION_HPP
#define NOX_EXCEPTION_HPP

#include <cstdlib>
#include <iostream>

namespace nox
{
    class exception
    {
        protected:
            char *m_msg;

        public:
            exception(const char *__msg = "nox::exception")
            {
                this->m_msg = (char *)__msg;
            }

            virtual const char *what() const noexcept
            {
                return this->m_msg;
            }
    };

    class out_of_range: public exception
    {
        public:
            out_of_range(const char *__msg = "nox::out_of_range")
            {
                this->m_msg = (char *)__msg;
            }

            const char *what() const noexcept
            {
                return this->m_msg;
            }
    };

    class bad_alloc: public exception
    {
        public:
            bad_alloc(const char *__msg = "nox::bad_alloc")
            {
                this->m_msg = (char *)__msg;
            }

            const char *what() const noexcept
            {
                return this->m_msg;
            }
    };

    [[noreturn]] inline void __terminate();

    inline void __throw_exception(const char *__msg = "nox::exception");
    inline void __throw_out_of_range(const char *__msg = "nox::out_of_range");
    inline void __throw_bad_alloc(const char *__msg = "nox::bad_alloc");
}

void nox::__terminate()
{
    std::abort();
}

void nox::__throw_exception(const char *__msg)
{
    nox::exception e(__msg);

    std::cout << "terminate called after throwing instance of \'nox::exception\'\n"
              << "  what(): " << e.what() << "\n";
    nox::__terminate();
}

void nox::__throw_out_of_range(const char *__msg)
{
    nox::out_of_range e(__msg);

    std::cout << "terminate called after throwing instance of \'nox::out_of_range\'\n"
              << "  what(): " << e.what() << "\n";
    nox::__terminate();
}

void nox::__throw_bad_alloc(const char *__msg)
{
    nox::bad_alloc e(__msg);

    std::cout << "terminate called after throwing instance of \'nox::bad_alloc\'\n"
              << "  what(): " << e.what() << "\n";
    nox::__terminate();
}

#endif