#ifndef NOX_ARRAY_HPP
#define NOX_ARRAY_HPP

#include "exception"
#include "vector"

#include <cstddef>

namespace nox
{
    template <class _Tp, std::size_t _Nm>
    struct array
    {
        _Tp _M_elems[_Nm ? _Nm : 1];

        // Element access
        
        constexpr _Tp &at(std::size_t __n);
        constexpr _Tp &at(std::size_t __n) const;

        constexpr _Tp &operator[](std::size_t __n) noexcept;
        constexpr _Tp &operator[](std::size_t __n) const noexcept;

        constexpr _Tp &front() noexcept;
        constexpr _Tp &front() const noexcept;

        constexpr _Tp &back() noexcept;
        constexpr _Tp &back() const noexcept;

        constexpr _Tp *data() noexcept;
        constexpr _Tp *data() const noexcept;

        // Iterators

        constexpr _Tp *begin() noexcept;
        constexpr const _Tp *begin() const noexcept;

        constexpr _Tp *end() noexcept;
        constexpr const _Tp *end() const noexcept;

        // Capacity

        [[nodiscard]] constexpr bool empty() const noexcept;
        constexpr std::size_t size() const noexcept;

        // Modifiers

        constexpr void fill(const _Tp & __e) noexcept;
        constexpr void swap(nox::array<_Tp, _Nm> &__a) noexcept;

        constexpr nox::vector<_Tp> filter(bool (*__pred)(const _Tp &)) const;
    };
}

#include "_tcc/array.tcc"

#endif