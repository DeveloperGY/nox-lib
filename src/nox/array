#ifndef NOX_ARRAY_HPP
#define NOX_ARRAY_HPP

#include "exception"
#include "vector"

#include <cstddef>

namespace nox
{
    template <class _Type, std::size_t _ElementCount>
    struct array
    {
        _Type m_elems[_ElementCount ? _ElementCount : 1];

        // Element access
        
        constexpr _Type &at(std::size_t __index);
        constexpr _Type &at(std::size_t __index) const;

        constexpr _Type &operator[](std::size_t __index) noexcept;
        constexpr _Type &operator[](std::size_t __index) const noexcept;

        constexpr _Type &front() noexcept;
        constexpr _Type &front() const noexcept;

        constexpr _Type &back() noexcept;
        constexpr _Type &back() const noexcept;

        constexpr _Type *data() noexcept;
        constexpr _Type *data() const noexcept;

        // Iterators

        constexpr _Type *begin() noexcept;
        constexpr const _Type *begin() const noexcept;

        constexpr _Type *end() noexcept;
        constexpr const _Type *end() const noexcept;

        // Capacity

        [[nodiscard]] constexpr bool empty() const noexcept;
        constexpr std::size_t size() const noexcept;

        // Modifiers

        constexpr void fill(const _Type & __element) noexcept;
        constexpr void swap(nox::array<_Type, _Nm> &__array) noexcept;

        constexpr nox::vector<_Type> filter(bool (*__predicate)(const _Type &)) const;
    };
}

#include "_tcc/array.tcc"

#endif